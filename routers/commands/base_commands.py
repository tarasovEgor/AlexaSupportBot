from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from .is_client_commands import handle_is_client
from .new_client_commands import handle_new_client
from .is_client_commands import router as is_client_commands_router

# from states.is_client_states import IsClientQuery
# from states.new_client_states import NewClientQuery
from states.ask_if_client_states import AskIfClientQuery

router = Router(name=__name__)


@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    text = markdown.text(
        "–î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º\! üëã\n\n"
        "üìç–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º?\n\n"
        "–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ",
        markdown.markdown_decoration.bold(
            markdown.text(
                "–¥–∞"
            )
        ),
        markdown.text(
            "/"
        ),
        markdown.markdown_decoration.bold(
            markdown.text(
                "–Ω–µ—Ç\."
            )
        )
    )
    await message.answer(
        text=text,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(AskIfClientQuery.is_client)


@router.message(AskIfClientQuery.is_client, F.text)
async def handle_ask_if_client(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        await handle_is_client(message, state)
    elif message.text.lower() == '–Ω–µ—Ç':
        await handle_new_client(message, state)
    else:
        text = markdown.text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ",
            markdown.markdown_decoration.bold(markdown.text("–¥–∞")),
            "–∏–ª–∏",
            markdown.markdown_decoration.bold(markdown.text("–Ω–µ—Ç üôÉ"))
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )


@router.message(AskIfClientQuery.is_client)
async def handle_invalid_ask_if_client(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router .message(Command("help"))
async def handle_help(message: types.Message):
    text = markdown.text(
        markdown.text(
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç",
            markdown.markdown_decoration.bold(
                markdown.text(
                    "–ê–ª–µ–∫—Å–∞\\,"
                )
            ),
            markdown.markdown_decoration.quote(
                "—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É.\n\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            ),
            markdown.markdown_decoration.bold(
                markdown.text(
                    "üìç–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \- /start\n",
                    "üìç–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ê–ª–µ–∫—Å–µ \- /ask\_alexa\n",
                    "üìç–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å \- /ask\_plan\n",
                    "üìç–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \- /support\n"
                )
            )
        ),
        markdown.text(
            "–î–ª—è –≤—ã–±–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É\.\n"
        ),
        sep="\n"
    )
    await message.answer(
        text=text,
        parse_mode=ParseMode.MARKDOWN_V2
    )

# --- OLD START COMMAND HANDLER ---

# @router.message(CommandStart())
# async def handle_start(message: types.Message):
#     text = markdown.text(
#         "üëã –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º\!\n",
#         markdown.markdown_decoration.bold(
#             markdown.text(
#                 "üìç–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT \- /ask\_gpt\nüìç–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \- /support\n"
#             )
#         ),
#         markdown.text(
#             "–î–ª—è –≤—ã–±–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É\.\n"
#         ),
#         sep="\n"
#     )
#     await message.answer(
#         text=text,
#         parse_mode=ParseMode.MARKDOWN_V2
#     )


# --- OLD HELP COMMAND HANDLER ---


# @router .message(Command("help"))
# async def handle_help(message: types.Message):
#     text = markdown.text(
#         markdown.text(
#             "–ú–µ–Ω—è –∑–æ–≤—É—Ç",
#             markdown.markdown_decoration.bold(
#                 markdown.text(
#                     "–ê–ª–µ–∫—Å–∞\\,"
#                 )
#             ),
#             markdown.markdown_decoration.quote(
#                 "—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É.\n\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
#             ),
#             markdown.markdown_decoration.bold(
#                 markdown.text(
#                     "üìç–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \- /start\n",
#                     "üìç–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT \- /ask\_gpt\n",
#                     "üìç–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \- /support\n"
#                 )
#             )
#         ),
#         markdown.text(
#             "–î–ª—è –≤—ã–±–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É\.\n"
#         ),
#         sep="\n"
#     )
#     await message.answer(
#         text=text,
#         parse_mode=ParseMode.MARKDOWN_V2
#     )