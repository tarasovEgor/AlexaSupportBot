from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.utils import markdown
from aiogram.fsm.context import FSMContext

from states.contract_states import ContractDataQuery

from utils.validators import validate_email_address

router = Router(name=__name__)


async def handle_form_new_contract(message: types.Message, state: FSMContext, client_infrastructure_data: dict):
    await state.set_state(ContractDataQuery.full_name)
    await message.answer(
        "‚≠êÔ∏è –û—Ç–ª–∏—á–Ω–æ! –î–ª—è —Å–≤—è–∑–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å –µ—â–µ –ø–∞—Ä—É –º–æ–º–µ–Ω—Ç–æ–≤.\n\n"
        "üìù –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)"
    )


@router.message(ContractDataQuery.full_name, F.text)
async def handle_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(ContractDataQuery.city)
    await message.answer(
        "üåÜ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?"
    )


@router.message(ContractDataQuery.full_name)
async def handle_invalid_full_name(message: types.Message, state: FSMContext):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(ContractDataQuery.city, F.text)
async def handle_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(ContractDataQuery.company_name)
    await message.answer(
        "üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏?"
    )


@router.message(ContractDataQuery.city)
async def handle_invalid_city(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(ContractDataQuery.company_name, F.text)
async def handle_company_name(message: types.Message, state: FSMContext):
    await state.update_data(company_name=message.text)
    await state.set_state(ContractDataQuery.company_address)
    await message.answer(
        "üìá –ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏?"
    )


@router.message(ContractDataQuery.company_name)
async def handle_invalid_company_name(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(ContractDataQuery.company_address, F.text)
async def handle_company_address(message: types.Message, state: FSMContext):
    await state.update_data(company_address=message.text)
    await state.set_state(ContractDataQuery.inn)
    await message.answer(
        "üìë –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏?"
    )


@router.message(ContractDataQuery.company_address)
async def handle_invalid_company_address(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(ContractDataQuery.inn, F.text)
async def handle_inn(message: types.Message, state: FSMContext):
    await state.update_data(inn=message.text)
    await state.set_state(ContractDataQuery.phone_number)
    await message.answer(
        "üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?"
    )


@router.message(ContractDataQuery.inn)
async def handle_invalid_inn(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(ContractDataQuery.phone_number, F.text)
async def handle_phone_number(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await state.set_state(ContractDataQuery.email)
    await message.answer(
        "üìß –í–∞—à –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã?"
    )


@router.message(ContractDataQuery.phone_number)
async def handle_invalid_phone_number(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(ContractDataQuery.email, validate_email_address)
async def handle_email(message: types.Message, state: FSMContext, email: str):
    contract_data = await state.update_data(email=email)
    await state.clear()

    # to_user_info model ...
    # write to db ...
    # send via email

    await message.answer(
        "üòá –û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º, —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è."
    )

@router.message(ContractDataQuery.email)
async def handle_invalid_email(message: types.Message, state: FSMContext):
    await message.answer(
        "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÑ"
    )