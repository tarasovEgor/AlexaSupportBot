from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils import markdown
from aiogram.fsm.context import FSMContext

from utils.zammadlib import submit_to_zammad
from utils.validators import validate_email_address

from states.zammad_states import ZammadQuery
from states.is_client_states import IsClientQuery

router = Router(name=__name__)


@router.message(IsClientQuery.has_contancted_support, F.text, Command("support"))
async def handle_support(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if user_data['full_name'] != None:
        await state.clear()
        await message.answer(
            "‚è≥ –§–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É...\n"
        )
        # await submit_to_zammad(user_data)
        await message.answer(
            "‚ò∫Ô∏è –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
        )
    else:
        text = markdown.text(
            "üò≤ –û–π, –∫–∞–∂–µ—Ç—Å—è –≤—ã —Ä–∞–Ω—å—à–µ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º\.\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\.\n",
            markdown.markdown_decoration.bold(
                    markdown.text(
                    "üìç–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \- /start\n"
                )
            ),
            sep="\n"
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await message.answer(
            user_data['full_name']
        )


@router.message(Command("support"))
async def handle_support(message: types.Message, state: FSMContext):
    text = markdown.text(
        "üò≤ –û–π, –∫–∞–∂–µ—Ç—Å—è –≤—ã —Ä–∞–Ω—å—à–µ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º\.\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\.\n",
        markdown.markdown_decoration.bold(
                markdown.text(
                "üìç–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \- /start\n"
            )
        ),
        sep="\n"
    )
    await message.answer(
        text=text,
        parse_mode=ParseMode.MARKDOWN_V2
    )
        


    # state.clear()
    # message.answer("–í—ã - " + user_data['full_name'])
    # await state.set_state(ZammadQuery.user_question)
    # await message.answer(
    #      "‚úèÔ∏è–ü–æ–∂–∞–ª—É–π—Ç—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É: \n"
    # )


# @router.message(ZammadQuery.user_question, F.text)
# async def handle_user_question(message: types.Message, state: FSMContext):
#     await state.update_data(user_question=message.text)
#     await state.set_state(ZammadQuery.user_name)
#     await message.answer(
#          "üìã –û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? \n"
#     )


# @router.message(ZammadQuery.user_question)
# async def handle_invalid_user_question(message: types.Message):
#     await message.answer(
#         "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.. üôÉ"
#     )


# @router.message(ZammadQuery.user_name, F.text)
# async def handle_user_name(message: types.Message, state: FSMContext):
#     await state.update_data(user_name=message.text)
#     await state.set_state(ZammadQuery.user_email)
#     await message.answer(
#         f"üì≠ –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {message.text}! "
#         "–ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã:"
#     )


# @router.message(ZammadQuery.user_name)
# async def handle_invalid_user_name(message: types.Message):
#     await message.answer(
#         "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
#     )


# @router.message(ZammadQuery.user_email, validate_email_address)
# async def handle_user_email(
#     message: types.Message,
#     state: FSMContext,
#     email: str
# ):
#     await state.update_data(user_email=email)
#     await state.set_state(ZammadQuery.user_inn)
#     await message.answer(
#         "‚≠êÔ∏è –ó–∞–ø–∏—Å–∞–ª–∞! –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à –ò–ù–ù:"
#     )


# @router.message(ZammadQuery.user_email)
# async def handle_invalid_user_email(message: types.Message):
#     await message.answer(
#         "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÑ"
#     )
    

# @router.message(ZammadQuery.user_inn, F.text)
# async def handle_user_inn(message: types.Message, state: FSMContext):
#     await state.update_data(user_inn=message.text)
#     await state.set_state(ZammadQuery.user_phone_number)
#     await message.answer(
#         "‚òéÔ∏è –°—É–ø–µ—Ä! –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
#     )


# @router.message(ZammadQuery.user_inn)
# async def handle_invalid_user_inn(message: types.Message):
#     await message.answer(
#         "–ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
#     )


@router.message(ZammadQuery.user_phone_number, F.text)
async def handle_user_phone_number(message: types.Message, state: FSMContext):
    zammad_user_data = await state.update_data(user_phone_number=message.text)
    await state.clear()
    await message.answer(
        "‚è≥ –§–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É...\n"
    )
    await submit_to_zammad(zammad_user_data)
    await message.answer(
        "‚ò∫Ô∏è –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
    )
    

@router.message(ZammadQuery.user_phone_number)
async def handle_invalid_user_phone_number(message: types.Message):
    await message.answer(
        "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )