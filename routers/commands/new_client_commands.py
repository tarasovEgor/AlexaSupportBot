from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils import markdown
from aiogram.fsm.context import FSMContext

from states.new_client_states import NewClientInfrastructureQuery

from utils.plancalc import calculate_plan_price

router = Router(name=__name__)


async def handle_new_client(message: types.Message, state: FSMContext):
    await state.set_state(NewClientInfrastructureQuery.PC_count)
    await message.answer(
        "–ü–æ–Ω—è–ª–∞, –≥–æ—Ç–æ–≤–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∞—Å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π "
        "–æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏. üôÇ\n\n"
        "üñ•Ô∏è –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ü–ö?"
    )


@router.message(NewClientInfrastructureQuery.PC_count, F.text)
async def handle_PC_count(message: types.Message, state: FSMContext):
    if '-' in message.text[0]:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.. üôÑ")
    elif not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. üôÉ")
    else:
        await state.update_data(PC_count=message.text)
        await state.set_state(NewClientInfrastructureQuery.server_count)
        await message.answer("üíΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤?")


@router.message(NewClientInfrastructureQuery.PC_count)
async def handle_invalid_PC_count(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(NewClientInfrastructureQuery.server_count, F.text)
async def handle_server_count(message: types.Message, state: FSMContext):
    if '-' in message.text[0]:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.. üôÑ")
    elif not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. üôÉ")
    else:
        await state.update_data(server_count=message.text)
        await state.set_state(NewClientInfrastructureQuery.office_count)
        await message.answer("üè¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ–∏—Å–æ–≤?")


@router.message(NewClientInfrastructureQuery.server_count)
async def handle_invalid_server_count(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(NewClientInfrastructureQuery.office_count, F.text)
async def handle_office_count(message: types.Message, state: FSMContext):
    if '-' in message.text[0]:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.. üôÑ")
    elif not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. üôÉ")
    else:
        await state.update_data(office_count=message.text)
        await state.set_state(NewClientInfrastructureQuery.program_type)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É: üóìÔ∏è")
        text = markdown.text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n",
            markdown.markdown_decoration.bold(markdown.text("üìç 1\. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 5x9:\n")),
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å 9 –¥–æ 18 —á–∞—Å–æ–≤ –ø–æ —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º\.\n",
            markdown.markdown_decoration.bold(markdown.text("üìç 2\. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 7x12:\n")),
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å 9 –¥–æ 21 —á–∞—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π\.\n",
            markdown.markdown_decoration.bold(markdown.text("üìç 3\. –ü—Ä–æ–≥—Ä–∞–º–º–∞ 7x24:\n")),
            "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π\.\n\n"
            "–î–ª—è –≤—ã–±–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã\. "            
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )


@router.message(NewClientInfrastructureQuery.office_count)
async def handle_invalid_office_count(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(NewClientInfrastructureQuery.program_type, F.text)
async def handle_program_type(message: types.Message, state: FSMContext):
    if '-' in message.text[0]:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.. üôÑ")
    elif not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. üôÉ")
    else:
        client_infrastructure_data = await state.update_data(program_type=message.text)
        await state.set_state(NewClientInfrastructureQuery.consent_recieved)
        text = markdown.text(
            markdown.markdown_decoration.bold(
                markdown.text(f"{await calculate_plan_price(client_infrastructure_data):,.0f}")
            )
        )
        await message.answer(
            "üßæ –°—É–º–º–∞ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç " + text + " —Ä—É–±\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º? üì©")


@router.message(NewClientInfrastructureQuery.program_type)
async def handle_program_type(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(NewClientInfrastructureQuery.consent_recieved, F.text)
async def handle_consent_recieved(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        client_infrastructure_data = await state.update_data(consent_recieved=message.text)
        # await handle_form_new_contract_data(message, data, client_infrastructure_data)
    elif message.text.lower() == "–Ω–µ—Ç":
        await state.clear()
        text = markdown.text(
            "–•–æ—Ä–æ—à–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø–æ–¥–æ–π–¥—É—Ç –¥—Ä—É–≥–∏–µ —Ç–∞—Ä–∏—Ñ—ã? ü§î\n\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \- ",
            markdown.markdown_decoration.bold(markdown.text("/get\_plans"))
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        text = markdown.text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ",
            markdown.markdown_decoration.bold(markdown.text("–¥–∞")),
            "–∏–ª–∏",
            markdown.markdown_decoration.bold(markdown.text("–Ω–µ—Ç üôÉ"))
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )