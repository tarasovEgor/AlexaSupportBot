from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils import markdown
from aiogram.fsm.context import FSMContext

from states.is_client_states import IsClientQuery

from utils.gptlib import gpt4
from utils.validators import validate_email_address

router = Router(name=__name__)


async def handle_is_client(message: types.Message, state: FSMContext):
    await state.set_state(IsClientQuery.full_name)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ üôÇ\n\n"
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:"
    )


@router.message(IsClientQuery.full_name, F.text)
async def handle_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(IsClientQuery.company_name)
    await message.answer("üè≠ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")


@router.message(IsClientQuery.full_name)
async def handle_invalid_full_name(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(IsClientQuery.company_name, F.text)
async def handle_company_name(message: types.Message, state: FSMContext):
    await state.update_data(company_name=message.text)
    await state.set_state(IsClientQuery.email)
    await message.answer("üì≠ –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")


@router.message(IsClientQuery.company_name)
async def handle_invalid_company_name(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(IsClientQuery.email, validate_email_address)
async def handle_user_email(
    message: types.Message,
    state: FSMContext,
    email: str
):
    await state.update_data(email=email)
    await state.set_state(IsClientQuery.inn)
    await message.answer(
        "‚≠êÔ∏è –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏:"
    )


@router.message(IsClientQuery.email)
async def handle_invalid_user_email(message: types.Message):
    await message.answer(
        "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÑ"
    )


@router.message(IsClientQuery.inn, F.text)
async def handle_inn(message: types.Message, state: FSMContext):
    # check if the client record exists in the db 
    # if !is_client then suggest becoming a new customer
    # if is_client then continue
    await state.update_data(inn=message.text)
    await state.set_state(IsClientQuery.phone_number)
    await message.answer(
        "‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )


@router.message(IsClientQuery.inn)
async def handle_invalid_inn(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )


@router.message(IsClientQuery.phone_number, F.text)
async def handle_phone_number(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await state.set_state(IsClientQuery.question)
    await message.answer(
        "üßê –°—É–ø–µ—Ä! –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ:"
    )


@router.message(IsClientQuery.phone_number)
async def handle_invalid_phone_number(message: types.Message):
    await message.answer(
        "–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.. üôÉ"
    )

# here the data is being written to the db
# once the user record exists within the db they can use the alexa_gpt func

@router.message(IsClientQuery.question, F.text)
async def handle_question(message: types.Message, state: FSMContext):
    user_data = await state.update_data(question=message.text)
    await message.answer(
        "üí°–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å ... \n" 
    )
    response = await gpt4(user_data['question'])
    await message.answer(
        response.choices[0].message.content
    )
    text = markdown.text(
        "–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ –≤–∞–º –æ—Ç–≤–µ—Ç? üôÑ\n–ù–∞–ø–∏—à–∏—Ç–µ",
        markdown.markdown_decoration.bold(markdown.text("–¥–∞")),
        "–∏–ª–∏",
        markdown.markdown_decoration.bold(markdown.text("–Ω–µ—Ç")),
        ":"
    )
    await message.answer(
        text=text,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(IsClientQuery.user_is_satisfied)


@router.message(IsClientQuery.user_is_satisfied, F.text)
async def handle_user_is_satisfied(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await message.answer("–ë–∞–ª–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ! ü•∞\n")
        await state.clear()
    elif message.text.lower() == "–Ω–µ—Ç":
        await state.set_state(IsClientQuery.has_contancted_support)
        text = markdown.text(
            "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π\, —Ç–æ –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ ",
            markdown.markdown_decoration.bold(
                markdown.text(
                    "—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\. üîß\n\nüìç–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ê–ª–µ–∫—Å–µ \- /ask\_alexa\nüìç–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \- /support\n"
                )
            ),
            sep="\n"
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        text = markdown.text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ",
            markdown.markdown_decoration.bold(markdown.text("–¥–∞")),
            "–∏–ª–∏",
            markdown.markdown_decoration.bold(markdown.text("–Ω–µ—Ç üôÉ"))
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )


# @router.message(IsClientQuery.has_contancted_support, F.text)
# async def handle_has_contacted_support(message: types.Message, state: FSMContext):
#     if message.text == "/support":
#         user_data = await state.update_data(has_contacted_support=message.text)
#         message.answer("you have decided to contact the support line")

        
    



# await message.answer(
#         "üí°–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å ... \n" 
#     )
#     response = await gpt4(message.text)
#     await message.answer(
#         response.choices[0].message.content
#     )
#     text = markdown.text(
#         "–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ –≤–∞–º –æ—Ç–≤–µ—Ç? üôÑ\n–ù–∞–ø–∏—à–∏—Ç–µ",
#         markdown.markdown_decoration.bold(markdown.text("–¥–∞")),
#         "–∏–ª–∏",
#         markdown.markdown_decoration.bold(markdown.text("–Ω–µ—Ç")),
#         ":"
#     )
#     await message.answer(
#         text=text,
#         parse_mode=ParseMode.MARKDOWN_V2
#     )
#     await state.set_state(GPTQuery.user_is_satisfied)