from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils import markdown
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

from utils.gptlib import gpt4

from states.gpt_states import GPTQuery

router = Router(name=__name__)


@router.message(Command("ask_alexa"))
async def handle_ask_gpt(message: types.Message, state: FSMContext):
    await state.set_state(GPTQuery.user_question)
    await message.answer(
        "‚úèÔ∏è–ü–æ–∂–∞–ª—É–π—Ç—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É: \n"
    )


@router.message(GPTQuery.user_question, F.text)
async def handle_gptquery_user_question(message: types.Message, state: FSMContext):
    await message.answer(
        "üí°–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å ... \n" 
    )
    response = await gpt4(message.text)
    await message.answer(
        response.choices[0].message.content
    )
    text = markdown.text(
        "–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ –≤–∞–º –æ—Ç–≤–µ—Ç? üôÑ\n–ù–∞–ø–∏—à–∏—Ç–µ",
        markdown.markdown_decoration.bold(markdown.text("–¥–∞")),
        "–∏–ª–∏",
        markdown.markdown_decoration.bold(markdown.text("–Ω–µ—Ç")),
        ":"
    )
    await message.answer(
        text=text,
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(GPTQuery.user_is_satisfied)


@router.message(GPTQuery.user_question)
async def handle_gptquery_invalid_user_question(message: types.Message):
    await message.answer(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.. üôÉ\n"
    )


@router.message(GPTQuery.user_is_satisfied, F.text)
async def handle_is_satisfied(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        await message.answer("–ë–∞–ª–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ! ü•∞\n")
        await state.clear()
    elif message.text.lower() == "–Ω–µ—Ç":
        text = markdown.text(
            "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑\, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π\, —Ç–æ –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É ",
            markdown.markdown_decoration.bold(
                markdown.text(
                    "—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\. üîß\n\nüìç–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ê–ª–µ–∫—Å–µ \- /ask\_alexa\nüìç–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \- /support\n"
                )
            ),
            sep="\n"
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    else:
        text = markdown.text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ",
            markdown.markdown_decoration.bold(markdown.text("–¥–∞")),
            "–∏–ª–∏",
            markdown.markdown_decoration.bold(markdown.text("–Ω–µ—Ç üôÉ"))
        )
        await message.answer(
            text=text,
            parse_mode=ParseMode.MARKDOWN_V2
        )