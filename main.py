import asyncio
import logging
import config

from aiogram import Bot
from aiogram import Dispatcher
from aiogram import types
from aiogram.filters import CommandStart, Command
from aiogram.utils import markdown
from aiogram.enums import ParseMode 

dp = Dispatcher()

@dp.message(CommandStart())
async def handle_start(message: types.Message):
    text = markdown.text(
        "üëã –î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º\! –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?\n",
        markdown.markdown_decoration.bold(
            markdown.text(
                "üìç–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT \- /ask\_gpt\nüìç–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \- /support\n"
            )
        ),
        markdown.text(
            "–î–ª—è –≤—ã–±–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É\.\n"
        ),
        sep="\n"
    )
    await message.answer(
        text=text,
        parse_mode=ParseMode.MARKDOWN_V2
    )


@dp.message(Command("help"))
async def hndle_help(message: types.Message):
    text = markdown.text(
        markdown.text(
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç",
            markdown.markdown_decoration.bold(
                markdown.text(
                    "–ê–ª–µ–∫—Å–∞\\,"
                )
            ),
            markdown.markdown_decoration.quote(
                "—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É.\n\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
            ),
            markdown.markdown_decoration.bold(
                markdown.text(
                    "üìç–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã \- /start\n",
                    "üìç–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT \- /ask\_gpt\n",
                    "üìç–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \- /support\n"
                )
            )
        ),
        markdown.text(
            "–î–ª—è –≤—ã–±–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É\.\n"
        ),
        sep="\n"
    )
    await message.answer(
        text=text,
        parse_mode=ParseMode.MARKDOWN_V2
    )


# @dp.message()
# async def echo_message(message: types.Message):
#     if message.text:
#         await message.answer(text="Hello there!")
    # await message.answer(message.text)


async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=config.BOT_TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

